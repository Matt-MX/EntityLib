package me.tofaa.entitylib.codegen;

import com.github.retrooper.packetevents.protocol.entity.data.EntityData;
import com.github.retrooper.packetevents.protocol.entity.data.EntityDataType;
import com.github.retrooper.packetevents.wrapper.play.server.WrapperPlayServerEntityMetadata;
import com.google.gson.reflect.TypeToken;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public final class Main {

    private Main() {}

    public static void main(String[] args) throws IOException {
        createMetadataClass();
        List<MetaClass> metaClasses = new ArrayList<>();

        // test


    }

    private static void writeClass(MetaClass metaClass) {
        File file = new File("src/main/java");
        TypeSpec typeSpec = metaClass.create();
        JavaFile javaFile = JavaFile.builder("me.tofaa.entitylib.meta", typeSpec).build();
        try {
            FileWriter fileWriter = new FileWriter(file);
            javaFile.writeTo(fileWriter);
        }
        catch (IOException e)  {
            throw new RuntimeException(e);
        }
    }

    private static void createMetadataClass() {

        TypeSpec.Builder builder = builder("me.tofaa.entitylib.meta", "Metadata");
        builder.addField(int.class, "entityId", Modifier.PRIVATE, Modifier.FINAL);
        builder.addField(TypeToken.getParameterized(Map.class, Byte.class, EntityDataType.class).getType(), "metadataMap", Modifier.PRIVATE, Modifier.FINAL);

        MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addCode("this.entityId = entityId;\n")
                .addCode("this.metadataMap = new ConcurrentHashMap<>();\n")
                .addParameter(int.class, "entityId");

        MethodSpec.Builder getIndex = MethodSpec.methodBuilder("getIndex")
                .addModifiers(Modifier.PUBLIC)
                .addTypeVariable(TypeVariableName.get("T"))
                .addParameter(byte.class, "index")
                .addParameter(TypeVariableName.get("T"), "defaultValue")
                .returns(TypeVariableName.get("T"))
                .addCode("EntityData entityData = metadataMap.get(index);\n")
                .addCode("if (entityData == null) return defaultValue;\n")
                .addCode("if (entityData.getValue() == null) return defaultValue;\n")
                .addCode("return (T) entityData.getValue();\n");

        MethodSpec.Builder setIndex = MethodSpec.methodBuilder("setIndex")
                .addModifiers(Modifier.PUBLIC)
                .addTypeVariable(TypeVariableName.get("T"))
                .addParameter(byte.class, "index")
                .addParameter(EntityDataType.class, "dataType")
                .addParameter(TypeVariableName.get("T"), "value")
                .addCode("EntityData data = new EntityData(index, dataType, value);\n")
                .addCode("this.metadataMap.put(index, data);\n");

        MethodSpec.Builder getEntries = MethodSpec.methodBuilder("getEntries")
                .addModifiers(Modifier.PUBLIC)
                .returns(TypeToken.getParameterized(List.class, EntityData.class).getType())
                .addCode("return new ArrayList<>(metadataMap.values());\n")
                .addAnnotation(NotNull.class);

        MethodSpec.Builder createPacket = MethodSpec.methodBuilder("createPacket")
                .addModifiers(Modifier.PUBLIC)
                .returns(WrapperPlayServerEntityMetadata.class)
                .addCode("return new WrapperPlayServerEntityMetadata(entityId, getEntries());\n")
                .addAnnotation(NotNull.class);

        builder.addMethod(constructor.build());
        builder.addMethod(getIndex.build());
        builder.addMethod(setIndex.build());
        builder.addMethod(getEntries.build());
        builder.addMethod(createPacket.build());

        File file = new File("src/main/java");
        JavaFile javaFile = JavaFile.builder("me.tofaa.entitylib.meta", builder.build()).build();
        try {
            FileWriter fileWriter = new FileWriter(file);
            javaFile.writeTo(fileWriter);
        }
        catch (IOException e)  {
            throw new RuntimeException(e);
        }
    }

    // Include comment in generated code
    public static TypeSpec.Builder builder(String packageName, String className) {
        return TypeSpec.classBuilder(ClassName.get(packageName, className))
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("AUTOGENERATED CODE BY ENTITYLIB CODEGEN\n")
                .addJavadoc("DO NOT EDIT\n");
    }


}
