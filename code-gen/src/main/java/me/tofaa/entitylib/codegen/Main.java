package me.tofaa.entitylib.codegen;

import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.ApiStatus;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public final class Main {

    private Main() {}
    private static final File OUT = new File("./api/src/main/java");
    static {
        if (!OUT.exists()) {
            OUT.mkdirs();
        }
        if (!OUT.isDirectory()) {
            OUT.delete();
            OUT.mkdirs();
        }
    }

    public static void main(String[] args) throws IOException {

        TypeSpec.Builder baseBuilder = TypeSpec.classBuilder(ClassName.get("me.tofaa.entitylib.meta", "MetaOffsetConverter"))
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addAnnotation(ApiStatus.Internal.class)
                .addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "unused").build())
                .addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).build());

        Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();
        InputStream stream = Main.class.getResourceAsStream("/offset-calculator.json");
        if (stream == null) {
            throw new RuntimeException("offset-calculator.json not found");
        }
        InputStreamReader reader = new InputStreamReader(stream);
        TypeHolder[] types = gson.fromJson(reader, TypeHolder[].class);
        for (TypeHolder type : types) {
            System.out.println("Generating type" + type.className());

            for (MetaOffset offset : type.offsets()) {

                MethodSpec.Builder method = MethodSpec.methodBuilder(offset.name() + "Offset")
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .returns(byte.class);

                String version = "int protocolVersion = getApi().getPacketEvents().getServerManager().getVersion().getProtocolVersion()";
                method.addStatement(version);
                for (VersionCheck check : offset.checks()) {
                    method.beginControlFlow("if (protocolVersion >= $L && protocolVersion <= $L)", check.to(), check.from());
                    method.addStatement("return $L", check.offset());
                    method.endControlFlow();
                }
                method.addStatement("throw new RuntimeException(\"Unknown protocol version for this method\")");
                baseBuilder.addMethod(method.build());
            }
        }

        TypeSpec base = baseBuilder.build();
        System.out.println("Writing to file");
        JavaFile file = JavaFile.builder("me.tofaa.entitylib.meta", base)
                .addStaticImport(ClassName.get("me.tofaa.entitylib", "EntityLib"), "getApi")
                .addFileComment("This class is generated by code-gen module. Do not edit manually.\n")
                .indent("    ")
                .skipJavaLangImports(true)
                .build();
        file.writeTo(OUT);
    }


}
